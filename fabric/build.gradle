plugins {
    id 'com.github.johnrengelman.shadow'
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    modImplementation "com.cobblemon:fabric:$rootProject.cobblemon_version"

    implementation "org.jetbrains.kotlin:kotlin-reflect:2.0.0"
    
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${fcap_version}"

    // modRuntimeOnly "curse.maven:simpletms-tms-and-trs-for-cobblemon-959184:${simpletms_fabric_version}"
    // modRuntimeOnly "curse.maven:pkgbadges-889895:${pkgbadges_fabric_version}"
    // modRuntimeOnly "curse.maven:patchouli-fabric-393236:${patchouli_fabric_version}"
    // modRuntimeOnly "curse.maven:cobblepedia-850946:${cobblepedia_fabric_version}"
    // modRuntimeOnly "curse.maven:configured-457570:${configured_fabric_version}"
    // modRuntimeOnly "mezz.jei:jei-${jei_mc_version}-fabric:${jei_version}"

    // TODO: this is temporary until ctengine is available on (curse)maven
    modImplementation files('../libs/ctengine-fabric-1.0.0.jar')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
