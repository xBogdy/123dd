plugins {
    id 'java'
    id 'maven-publish'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE.md")) {
            rename { "${mod_id}_${it}" }
        }

        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : mod_name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE.md")) {
            rename { "${mod_id}_${it}" }
        }
    }

    repositories {
        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }

        maven {
            name = 'Mod Maven (Mekanism)'
            url = 'https://modmaven.dev/'
        }

        maven {
            name = 'CurseForge'
            url = 'https://www.cursemaven.com'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    processResources {
        from project(":common").sourceSets.main.resources
        
        filesMatching(['**/mods.toml', 'pack.mcmeta', 'fabric.mod.json', 'mixins.*.json']) {
            expand project.properties
        }
    }

    if(it.name != 'common') {
        tasks.withType(JavaCompile) {
            source(project(":common").sourceSets.main.allSource)
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId project.group
                    artifactId project.archivesBaseName
                    version project.version
                    artifact jar
                }
            }

            repositories {
                maven {
                    url "file://" + System.getenv("local_maven")
                }
            }
        }
    }
}
