plugins {
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'org.spongepowered.mixin' version "${sponge_mixin_version}"
}

archivesBaseName = "${mod_id}-forge-${minecraft_version}-${mod_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run/client_1')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        client2 {
            parent runs.client
            workingDirectory project.file('run/client_2')
            taskName 'runClient2'
            args '--username', 'Dev2'
        }

        server {
            workingDirectory project.file('run/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")

    // Architectury
    implementation fg.deobf("curse.maven:architectury-api-419699:${architectury_version}")

    // Kotlin for Forge
    implementation fg.deobf("thedarkcolour:kotlinforforge:${kotlin_for_forge_version}")

    // Cobblemon
    implementation fg.deobf("com.cobblemon:forge:${cobblemon_version}")

    // Cobblemon Trainers
    implementation fg.deobf("curse.maven:cobblemontrainers-959503:${cobblemontrainers_version}")

    // Patchouli
    runtimeOnly fg.deobf("curse.maven:patchouli-306770:${patchouli_version}")

    // Cobblepedia
    runtimeOnly fg.deobf("curse.maven:cobblepedia-850946:${cobblepedia_version}")

    // Configured
    runtimeOnly fg.deobf("curse.maven:configured-457570:${configured_version}")

    // JEI
    // compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge:${jei_version}")
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    add sourceSets.main, "mixins.${mod_id}.forge.refmap.json"

    config "mixins.${mod_id}.json"
    config "mixins.${mod_id}.forge.json"
}

sourceSets.main.resources.srcDir 'src/generated/resources'
jar.finalizedBy('reobfJar')
